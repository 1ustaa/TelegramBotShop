import os.path

from aiogram import F, types, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import FSInputFile, InputMediaPhoto

import keyboards
from states.states import ChoseDevice, push_state, pop_state, state_handlers
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from data.model import get_color_model_image

router = Router()

# TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# callback –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "categories")
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboards.builders.categories_kb()
    )
    await push_state(state, ChoseDevice.showing_categories)
    await callback.answer()

# callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data.startswith("pg_category"))
async def process_category_pagination(callback: types.CallbackQuery, state: FSMContext):
    data_split = callback.data.split("_")
    try:
        page = int(data_split[3])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboards.builders.categories_kb(page)
    )
    await callback.answer()

# callback –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
@router.callback_query(
    F.data.startswith("category_"),
    ChoseDevice.showing_categories
)
async def process_manufacturer_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return
    await state.update_data(chosen_category=category_id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è", reply_markup=keyboards.builders.manufacturer_kb(category_id)
    )
    await push_state(state, ChoseDevice.showing_manufacturers)
    await callback.answer()

# callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
@router.callback_query(
    F.data.startswith("pg_manufacturer"),
    ChoseDevice.showing_manufacturers
)
async def process_manufacturer_pagination(callback: types.CallbackQuery, state: FSMContext):
    data_split = callback.data.split("_")
    try:
        category_id = int(data_split[3])
        page = int(data_split[4])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è", reply_markup=keyboards.builders.manufacturer_kb(category_id, page)
    )
    await callback.answer()

# callback –¥–ª—è –º–æ–¥–µ–ª–µ–π
@router.callback_query(F.data.startswith("manufacturer_"), ChoseDevice.showing_manufacturers)
async def process_model_selection(callback: types.CallbackQuery, state: FSMContext):
    data_split = callback.data.split("_")
    try:
        manufacturer_id = int(data_split[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    await state.update_data(chosen_manufacturer=manufacturer_id)
    data = await state.get_data()
    category_id = data.get("chosen_category")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=keyboards.builders.models_kb(category_id, manufacturer_id)
    )
    await push_state(state, ChoseDevice.showing_models)
    await callback.answer()

# callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
@router.callback_query(
    F.data.startswith("pg_model"),
    ChoseDevice.showing_models
)
async def process_model_pagination(callback: types.CallbackQuery, state: FSMContext):
    data_split = callback.data.split("_")
    try:
        category_id = int(data_split[3])
        manufacturer_id = int(data_split[4])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return


    page = int(data_split[5])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=keyboards.builders.models_kb(category_id, manufacturer_id, page)
    )
    await callback.answer()

# callback –¥–ª—è —Ü–≤–µ—Ç–æ–≤
@router.callback_query(F.data.startswith("model_"), ChoseDevice.showing_models)
async def process_color_selection(callback: types.CallbackQuery, state: FSMContext):
    data_split = callback.data.split("_")
    try:
        model_id = int(data_split[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    await state.update_data(chosen_model=model_id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=keyboards.builders.colors_kb(model_id)
    )
    await push_state(state, ChoseDevice.showing_colors)
    await callback.answer()

# callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
@router.callback_query(
    F.data.startswith("pg_color"),
    ChoseDevice.showing_colors
)
async def process_color_pagination(callback: types.CallbackQuery, state: FSMContext):
    data_split = callback.data.split("_")
    try:
        model_id = int(data_split[3])
        page = int(data_split[4])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=keyboards.builders.colors_kb(model_id, page)
    )
    await callback.answer()

# callback –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
@router.callback_query(F.data.startswith("color_"), ChoseDevice.showing_colors)
async def process_variant_selection(callback: types.CallbackQuery, state: FSMContext):
    data_split = callback.data.split("_")
    try:
        color_id = int(data_split[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    data = await state.get_data()
    model_id = data.get("chosen_model")

    model_name, color_name, image_path = get_color_model_image(model_id, color_id)

    await state.update_data(chosen_color=color_id)

    if image_path and os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await callback.message.edit_media(
                media=InputMediaPhoto(media=photo, caption=f"<b>{model_name} {color_name}</b>"
                                                           "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"),
                reply_markup=keyboards.builders.variants_kb(model_id, color_id)
        )
    else:
        await callback.message.edit_text(
                f"<b>{model_name} {color_name}</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
                reply_markup=keyboards.builders.variants_kb(model_id ,color_id)
        )

    await push_state(state, ChoseDevice.showing_variants)
    await callback.answer()

# callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
@router.callback_query(
    F.data.startswith("pg_variant"),
    ChoseDevice.showing_variants
)
async def process_variant_pagination(callback: types.CallbackQuery, state: FSMContext):
    data_split = callback.data.split("_")

    try:
        model_id = int(data_split[3])
        color_id = int(data_split[4])
        page = int(data_split[5])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    model_name, color_name, image_path = get_color_model_image(model_id, color_id)

    if image_path and os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await callback.message.edit_media(
            media=InputMediaPhoto(media=photo, caption=f"<b>{model_name} {color_name}</b>"
                                                       "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"),
            reply_markup=keyboards.builders.variants_kb(model_id, color_id, page)
        )
    else:
        await callback.message.edit_text(
            f"<b>{model_name} {color_name}</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
            reply_markup=keyboards.builders.variants_kb(model_id, color_id, page)
        )
    await callback.answer()

async def safe_edit_message(callback: types.CallbackQuery, text: str=None, reply_markup=None, media=None):
    try:
        if media:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=media,
                    caption=text
                ),
                reply_markup=reply_markup
            )
        else:
            await callback.message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        elif "there is no text in the message to edit" in str(e):
            await callback.message.delete()
            await callback.message.answer(
                text=text,
                reply_markup=reply_markup
            )
        else:
            raise


# callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu", StateFilter("*"))
async def return_main_menu(callback: types.CallbackQuery, state: FSMContext):
    text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    await safe_edit_message(callback, text, keyboards.inline.menu_kb)
    await state.clear()
    await callback.answer()

# callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@router.callback_query(F.data == "go_back", StateFilter("*"))
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    prev_state = await pop_state(state)

    if prev_state is None:
        await safe_edit_message(
            callback, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", keyboards.inline.menu_kb
        )
        return

    data = await state.get_data()
    handler = state_handlers.get(prev_state)

    if handler:
        try:
            markup = handler["markup"](data)
            text = handler["text"]
            try:
                await safe_edit_message(callback, text, markup)
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    pass
                else:
                    raise
        except Exception as e:
            await safe_edit_message(
                callback,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboards.inline.menu_kb
            )
    else:
        await safe_edit_message(
            callback,
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=keyboards.inline.menu_kb
        )

    await callback.answer()

# callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
@router.callback_query(F.data == "information")
async def process_category_selection(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            text="üí≥ <b>–û –º–∞–≥–∞–∑–∏–Ω–µ</b>"
                 "\n–ú—ã ‚Äî –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏, –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ: —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –ø–ª–∞–Ω—à–µ—Ç—ã, —á–∞—Å—ã –∏ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ö–æ—Ä–æ—à–∏–º —Ü–µ–Ω–∞–º."
                 "\n\n‚ÑπÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>"
                 "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –¥–∞–Ω–Ω–æ–º Telegram-–±–æ—Ç–µ, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π."
                 "\n–£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ —Ü–µ–Ω—É –º–æ–∂–Ω–æ —É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=keyboards.inline.menu_kb
        )

    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await callback.answer()