from aiogram import F, types, Router
import keyboards
from states.states import ChoseDevice
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

# TODO: –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥

router = Router()

@router.callback_query(F.data == "information")
async def process_category_selection(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text="üí≥ <b>–û –º–∞–≥–∞–∑–∏–Ω–µ</b>" 
            "\n–ú—ã ‚Äî –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏, –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ: —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –ø–ª–∞–Ω—à–µ—Ç—ã, —á–∞—Å—ã –∏ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ö–æ—Ä–æ—à–∏–º —Ü–µ–Ω–∞–º."
            "\n\n‚ÑπÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>" 
            "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –¥–∞–Ω–Ω–æ–º Telegram-–±–æ—Ç–µ, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π." 
            "\n–£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ —Ü–µ–Ω—É –º–æ–∂–Ω–æ —É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
        reply_markup=keyboards.inline.menu_kb
    )
    await callback.answer()

@router.callback_query(F.data == "categories")
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboards.builders.categories_kb()
    )
    await callback.answer()
    await state.set_state(ChoseDevice.choosing_category)

#–í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("categories_"), ChoseDevice.choosing_category)
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await state.update_data(chosen_category=category_id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è", reply_markup=keyboards.builders.manufacturer_kb(category_id)
    )
    await state.set_state(ChoseDevice.choosing_manufacturer)
    await callback.answer()

@router.callback_query(F.data.startswith("manufacturer_"), ChoseDevice.choosing_manufacturer)
async def process_device_selection(callback: types.CallbackQuery, state: FSMContext):
    manufacturer_id = int(callback.data.split("_")[1])
    category_id = await state.get_data()
    category_id = category_id["chosen_category"]
    await state.update_data(chosen_manufacturer=manufacturer_id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", reply_markup=keyboards.builders.devices_kb(category_id, manufacturer_id)
    )
    await state.set_state(ChoseDevice.choosing_device)
    await callback.answer()

@router.callback_query(F.data.startswith("devices_"), ChoseDevice.choosing_device)
async def process_devices_pagination(callback: types.CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    action = data_parts[1]
    category_id = int(data_parts[2])
    manufacturer_id = int(data_parts[3])
    page = int(data_parts[4])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        reply_markup=keyboards.builders.devices_kb(category_id, manufacturer_id, page)
    )
    await callback.answer()

@router.callback_query(F.data == "main_menu", StateFilter("*"))
async def return_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=keyboards.inline.menu_kb)
    await state.set_state(ChoseDevice.choosing_category)
    await callback.answer()